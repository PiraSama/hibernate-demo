package org.example.multilangproduct.ui;

import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatMaterialLighterIJTheme;
import net.miginfocom.swing.MigLayout;
import org.example.multilangproduct.dao.LanguageDAO;
import org.example.multilangproduct.dao.ProductCategoryDAO;
import org.example.multilangproduct.dao.ProductDAO;
import org.example.multilangproduct.dto.ProductDisplayDTO;
import org.example.multilangproduct.entity.Language;
import org.example.multilangproduct.entity.Product;
import org.example.multilangproduct.entity.ProductCategory;
import org.example.multilangproduct.service.ProductService;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.stream.Collectors;

public class ProductUI extends JFrame {
    private final ProductService productService;
    private final ProductDAO productDAO;
    private final ProductCategoryDAO categoryDAO;
    private final LanguageDAO languageDAO;

    private JTable productTable;
    private DefaultTableModel tableModel;

    private JTextField idField, priceField;
    private JComboBox<String> categoryCombo;
    private Map<String, Integer> categoryMap;
    private JButton addButton, updateButton, deleteButton;
    private boolean isLoading = false;

    // PH·∫¶N M·ªöI CHO ƒêA NG√îN NG·ªÆ
    private JComboBox<String> languageCombo;
    // Map: T√™n ng√¥n ng·ªØ -> M√£ ng√¥n ng·ªØ
    private Map<String, String> langNameToCodeMap;
    private List<Language> allLanguages;
    private String currentLangCode = "en";

    // KHAI B√ÅO M·ªöI CHO TR∆Ø·ªúNG D·ªäCH ƒê·ªòNG
    private JPanel translationFieldsPanel;
    // Map: M√£ ng√¥n ng·ªØ -> JTextField
    private Map<String, JTextField> translationFieldsMap;

    public ProductUI() {
        FlatMaterialLighterIJTheme.setup(); // üåà giao di·ªán Material Design s√°ng

        // ‚ú® S·ª¨A FONT: D√πng 'Dialog' ƒë·ªÉ ƒë·∫£m b·∫£o h·ªó tr·ª£ Unicode CJK (Ti·∫øng Trung/Nh·∫≠t) t·ªët h∆°n
        UIManager.put("defaultFont", new Font("Dialog", Font.PLAIN, 14));
        UIManager.put("Button.arc", 12);
        UIManager.put("Component.arc", 10);
        UIManager.put("TextComponent.arc", 10);
        UIManager.put("Table.showVerticalLines", true);
        UIManager.put("Table.showHorizontalLines", true);
        UIManager.put("Table.gridColor", new Color(220, 220, 220));


        this.productService = new ProductService();
        this.productDAO = new ProductDAO();
        this.categoryDAO = new ProductCategoryDAO();
        this.languageDAO = new LanguageDAO();

        // T·∫£i t·∫•t c·∫£ ng√¥n ng·ªØ m·ªôt l·∫ßn khi kh·ªüi t·∫°o
        this.allLanguages = productService.getAllActiveLanguages();

        initializeUI();
        // B·∫Øt ƒë·∫ßu v·ªõi ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh l√† 'en'
        loadProducts();
    }

    private void initializeUI() {
        setTitle("üì¶ Qu·∫£n l√Ω S·∫£n ph·∫©m ƒêa Ng√¥n Ng·ªØ");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1000, 700);
        setLayout(new BorderLayout(10, 10));
        setLocationRelativeTo(null);
        ((JPanel) getContentPane()).setBorder(new EmptyBorder(10, 10, 10, 10));

        // ====== B·∫¢NG S·∫¢N PH·∫®M ======
        String[] columns = {"ID", "T√™n S·∫£n Ph·∫©m", "Gi√°", "Danh m·ª•c"};
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0) return Integer.class;
                if (columnIndex == 2) return BigDecimal.class;
                return String.class;
            }

            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };

        productTable = new JTable(tableModel);
        productTable.setRowHeight(30);
        productTable.setFont(new Font("Dialog", Font.PLAIN, 14)); // ƒê·∫£m b·∫£o b·∫£ng hi·ªÉn th·ªã ƒë√∫ng k√Ω t·ª±
        productTable.setSelectionBackground(new Color(120, 180, 255));
        productTable.setIntercellSpacing(new Dimension(0, 0));

        JTableHeader tableHeader = productTable.getTableHeader();
        tableHeader.setFont(new Font("Dialog", Font.BOLD, 15));
        tableHeader.setOpaque(false);
        tableHeader.setBackground(new Color(242, 242, 242));
        DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) tableHeader.getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        JScrollPane scrollPane = new JScrollPane(productTable);
        scrollPane.setBorder(BorderFactory.createTitledBorder("Danh s√°ch s·∫£n ph·∫©m"));

        // ====== KHU V·ª∞C ƒêI·ªÄU KHI·ªÇN TR√äN C√ôNG (CHUY·ªÇN NG√îN NG·ªÆ & REFRESH) ======
        languageCombo = new JComboBox<>();
        languageCombo.setFont(new Font("Dialog", Font.PLAIN, 14)); // ƒê·∫£m b·∫£o ComboBox hi·ªÉn th·ªã ƒë√∫ng k√Ω t·ª± CJK
        loadLanguagesIntoCombo();

        languageCombo.addActionListener(e -> {
            if (!isLoading && languageCombo.getSelectedItem() != null) {
                String langName = (String) languageCombo.getSelectedItem();
                // L·∫•y m√£ ng√¥n ng·ªØ t·ª´ t√™n ƒë√£ ch·ªçn
                currentLangCode = langNameToCodeMap.getOrDefault(langName, "en");
                loadProducts();
            }
        });

        JButton refreshButton = new JButton("L√†m m·ªõi & X√≥a Form");
        refreshButton.addActionListener(e -> {
            if (!isLoading) {
                clearForm();
                loadCategoriesIntoCombo();
                loadProducts();
            }
        });

        JPanel langRefreshPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 5));
        langRefreshPanel.add(new JLabel("Ng√¥n ng·ªØ Hi·ªÉn th·ªã:"));
        langRefreshPanel.add(languageCombo);
        langRefreshPanel.add(refreshButton);

        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.add(langRefreshPanel, BorderLayout.NORTH);
        topPanel.add(scrollPane, BorderLayout.CENTER);
        add(topPanel, BorderLayout.CENTER);

        // ====== FORM NH·∫¨P D·ªÆ LI·ªÜU ƒêA NG√îN NG·ªÆ ======
        JPanel formWrapperPanel = new JPanel(new MigLayout("wrap 2, fillx", "[150][grow]"));
        formWrapperPanel.setBorder(BorderFactory.createTitledBorder("üìù Qu·∫£n l√Ω S·∫£n ph·∫©m & B·∫£n d·ªãch"));

        idField = new JTextField();
        idField.setEnabled(false);
        priceField = new JTextField();
        categoryCombo = new JComboBox<>();
        loadCategoriesIntoCombo();

        // 1. C√ÅC TR∆Ø·ªúNG C·ªê ƒê·ªäNH (ID, GI√Å, DANH M·ª§C)
        formWrapperPanel.add(new JLabel("M√£ SP (ID):"));
        formWrapperPanel.add(idField, "growx");
        formWrapperPanel.add(new JLabel("Gi√° ($):"));
        formWrapperPanel.add(priceField, "growx");
        formWrapperPanel.add(new JLabel("Danh m·ª•c:"));
        formWrapperPanel.add(categoryCombo, "growx");

        // 2. PANEL CH·ª®A C√ÅC TR∆Ø·ªúNG D·ªäCH THU·∫¨T ƒê·ªòNG
        translationFieldsPanel = new JPanel(new MigLayout("wrap 2, fillx", "[150][grow]"));
        JScrollPane translationScrollPane = new JScrollPane(translationFieldsPanel);
        translationScrollPane.setPreferredSize(new Dimension(400, 150));
        translationScrollPane.setBorder(BorderFactory.createTitledBorder("B·∫£n d·ªãch T√™n S·∫£n ph·∫©m (T·∫•t c·∫£ ng√¥n ng·ªØ)"));

        formWrapperPanel.add(translationScrollPane, "span 2, growx, pushx");

        // Kh·ªüi t·∫°o c√°c tr∆∞·ªùng nh·∫≠p li·ªáu b·∫£n d·ªãch khi UI load
        createDynamicTranslationFields();


        // 3. C√ÅC N√öT H√ÄNH ƒê·ªòNG
        addButton = new JButton("Th√™m M·ªõi");
        updateButton = new JButton("C·∫≠p nh·∫≠t");
        deleteButton = new JButton("X√≥a");

        addButton.setBackground(new Color(46, 204, 113));
        addButton.setForeground(Color.WHITE);
        updateButton.setBackground(new Color(52, 152, 219));
        updateButton.setForeground(Color.WHITE);
        deleteButton.setBackground(new Color(231, 76, 60));
        deleteButton.setForeground(Color.WHITE);

        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 5));
        btnPanel.add(addButton);
        btnPanel.add(updateButton);
        btnPanel.add(deleteButton);

        formWrapperPanel.add(new JLabel(), "growx");
        formWrapperPanel.add(btnPanel, "growx");
        add(formWrapperPanel, BorderLayout.SOUTH);

        // ====== S·ª∞ KI·ªÜN ======
        addButton.addActionListener(new AddProductListener());
        updateButton.addActionListener(new UpdateProductListener());
        deleteButton.addActionListener(new DeleteProductListener());

        productTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && productTable.getSelectedRow() != -1) {
                int row = productTable.getSelectedRow();
                Integer productId = (Integer) tableModel.getValueAt(row, 0);
                loadProductDetailsToForm(productId);
            }
        });
    }

    // PH∆Ø∆†NG TH·ª®C: T·∫£i ng√¥n ng·ªØ v√†o JComboBox
    private void loadLanguagesIntoCombo() {
        languageCombo.removeAllItems();
        langNameToCodeMap = new LinkedHashMap<>(); // S·ª≠a: D√πng Map T√™n -> M√£ ƒë·ªÉ tra c·ª©u d·ªÖ h∆°n

        if (allLanguages.isEmpty()) {
            languageCombo.addItem("‚ö†Ô∏è Kh√¥ng c√≥ ng√¥n ng·ªØ n√†o");
            return;
        }

        try {
            for (Language lang : allLanguages) {
                String langName = lang.getLangName();
                String langCode = lang.getLangCode();
                langNameToCodeMap.put(langName, langCode); // L∆∞u tr·ªØ T√™n -> M√£
                languageCombo.addItem(langName); // Hi·ªÉn th·ªã T√™n trong Combo
            }

            // Ch·ªçn ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh (Ti·∫øng Anh)
            String defaultLangName = allLanguages.stream()
                    .filter(lang -> lang.getLangCode().equals("en"))
                    .map(Language::getLangName)
                    .findFirst()
                    .orElse(null);

            if (defaultLangName != null) {
                languageCombo.setSelectedItem(defaultLangName);
            } else if (languageCombo.getItemCount() > 0) {
                languageCombo.setSelectedIndex(0);
            }
        } catch (Exception e) {
            e.printStackTrace();
            languageCombo.addItem("‚ö†Ô∏è L·ªói t·∫£i ng√¥n ng·ªØ");
        }
    }


    // PH∆Ø∆†NG TH·ª®C M·ªöI: T·∫°o c√°c JTextField ƒë·ªông cho t·∫•t c·∫£ ng√¥n ng·ªØ
    private void createDynamicTranslationFields() {
        translationFieldsPanel.removeAll();
        translationFieldsMap = new LinkedHashMap<>();

        // L·∫∑p qua t·∫•t c·∫£ c√°c ng√¥n ng·ªØ ƒëang ho·∫°t ƒë·ªông
        for (Language lang : allLanguages) {
            String langName = lang.getLangName();
            String langCode = lang.getLangCode();

            JTextField textField = new JTextField();

            // ƒê·∫∑t font r√µ r√†ng cho tr∆∞·ªùng nh·∫≠p li·ªáu ƒë·ªÉ hi·ªÉn th·ªã CJK
            textField.setFont(new Font("Dialog", Font.PLAIN, 14));

            if (langCode.equals("en")) {
                textField.setToolTipText("B·∫£n d·ªãch Ti·∫øng Anh l√† B·∫ÆT BU·ªòC");
            }

            translationFieldsPanel.add(new JLabel("T√™n (" + langName + "):"));
            translationFieldsPanel.add(textField, "growx");
            translationFieldsMap.put(langCode, textField);
        }

        translationFieldsPanel.revalidate();
        translationFieldsPanel.repaint();
    }

    // PH∆Ø∆†NG TH·ª®C M·ªöI: T·∫£i chi ti·∫øt s·∫£n ph·∫©m v√†o form (bao g·ªìm b·∫£n d·ªãch)
    private void loadProductDetailsToForm(Integer productId) {
        Optional<Product> productOpt = productDAO.getProductById(productId);
        if (productOpt.isEmpty()) return;

        Product p = productOpt.get();

        // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c·ªë ƒë·ªãnh
        idField.setText(p.getProductId().toString());
        priceField.setText(p.getPrice().toPlainString());

        // Khi ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ s·ª≠a, kh√¥ng cho s·ª≠a gi√° v√† danh m·ª•c
        priceField.setEnabled(false);
        categoryCombo.setEnabled(false);

        // C·∫≠p nh·∫≠t Danh m·ª•c (t√™n category l·∫•y theo ng√¥n ng·ªØ EN)
        String catNameEn = categoryDAO.getCategoryNameByLanguage(p.getCategory().getProductCategoryId(), "en")
                .orElse("Category " + p.getCategory().getProductCategoryId());
        categoryCombo.setSelectedItem(catNameEn);

        // X√≥a n·ªôi dung c≈© trong c√°c tr∆∞·ªùng d·ªãch thu·∫≠t
        translationFieldsMap.values().forEach(field -> field.setText(""));

        // T·∫£i c√°c b·∫£n d·ªãch v√†o c√°c tr∆∞·ªùng nh·∫≠p li·ªáu ƒë·ªông
        for (String langCode : translationFieldsMap.keySet()) {
            productDAO.getTranslationByIdAndLang(productId, langCode).ifPresent(pt -> {
                translationFieldsMap.get(langCode).setText(pt.getProductName());
            });
        }
    }

    // ====== LOAD D·ªÆ LI·ªÜU (Gi·ªØ nguy√™n) ======
    private void loadCategoriesIntoCombo() {
        categoryCombo.removeAllItems();
        categoryMap = new HashMap<>();
        try {
            // L·∫•y m√£ ID c·ªßa ng√¥n ng·ªØ EN (v√¨ DAO c·∫ßn ID ho·∫∑c code)
            Language enLang = languageDAO.getByCode("en");
            if (enLang == null) {
                categoryCombo.addItem("‚ùå Thi·∫øu Ng√¥n ng·ªØ EN");
                return;
            }

            List<ProductCategory> categories = categoryDAO.getAllCategories();
            for (ProductCategory cat : categories) {
                // L·∫•y t√™n danh m·ª•c b·∫±ng Ti·∫øng Anh
                String name = categoryDAO.getCategoryNameByLanguage(cat.getProductCategoryId(), "en")
                        .orElse("Category " + cat.getProductCategoryId());
                categoryMap.put(name, cat.getProductCategoryId());
                categoryCombo.addItem(name);
            }
            if (categoryCombo.getItemCount() == 0)
                categoryCombo.addItem("‚ö†Ô∏è Ch∆∞a c√≥ Danh m·ª•c");
        } catch (Exception e) {
            e.printStackTrace();
            categoryCombo.addItem("‚ö†Ô∏è L·ªói load danh m·ª•c");
        }
    }

    private void loadProducts() {
        if (isLoading) return;
        isLoading = true;
        int selectedRow = productTable.getSelectedRow();

        // L·∫•y t√™n ng√¥n ng·ªØ hi·ªÉn th·ªã
        String langName = langNameToCodeMap.entrySet().stream()
                .filter(entry -> entry.getValue().equals(currentLangCode))
                .map(Map.Entry::getKey)
                .findFirst()
                .orElse("Product");

        tableModel.setColumnIdentifiers(new String[]{"ID", "T√™n (" + langName + ")", "Gi√°", "Danh m·ª•c"});

        tableModel.setRowCount(0);
        try {
            List<ProductDisplayDTO> products = productService.getProductsForDisplay(currentLangCode);

            for (ProductDisplayDTO dto : products) {
                tableModel.addRow(new Object[]{
                        dto.getProductId(),
                        dto.getProductName(),
                        dto.getPrice(),
                        dto.getCategoryName()
                });
            }

            // Thi·∫øt l·∫≠p l·∫°i Renderer sau khi thay ƒë·ªïi c·ªôt
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
            productTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);

            DefaultTableCellRenderer priceRenderer = new DefaultTableCellRenderer();
            priceRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
            productTable.getColumnModel().getColumn(2).setCellRenderer(priceRenderer);

            productTable.getColumnModel().getColumn(0).setMaxWidth(80);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "L·ªói khi t·∫£i danh s√°ch s·∫£n ph·∫©m: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        } finally {
            isLoading = false;
            if (selectedRow != -1 && selectedRow < productTable.getRowCount()) {
                productTable.setRowSelectionInterval(selectedRow, selectedRow);
            }
        }
    }

    // ====== LISTENER CRUD ======

    private class AddProductListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String enName = translationFieldsMap.getOrDefault("en", new JTextField()).getText().trim();
            String priceStr = priceField.getText().trim();

            if (enName.isEmpty() || priceStr.isEmpty()) {
                JOptionPane.showMessageDialog(ProductUI.this, "Vui l√≤ng nh·∫≠p t√™n EN v√† Gi√°!", "Thi·∫øu th√¥ng tin", JOptionPane.WARNING_MESSAGE);
                return;
            }

            try {
                BigDecimal price = new BigDecimal(priceStr);
                String catName = (String) categoryCombo.getSelectedItem();

                if (catName == null || !categoryMap.containsKey(catName)) {
                    JOptionPane.showMessageDialog(ProductUI.this, "Danh m·ª•c kh√¥ng h·ª£p l·ªá!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                ProductCategory cat = categoryDAO.getById(categoryMap.get(catName))
                        .orElseThrow(() -> new IllegalStateException("Category not found"));

                // 1. T·∫°o v√† L∆∞u Product g·ªëc
                Product p = new Product(price, BigDecimal.ZERO, cat);
                productDAO.saveProduct(p);
                Integer newProductId = p.getProductId();

                // 2. L∆∞u t·∫•t c·∫£ c√°c b·∫£n d·ªãch t·ª´ form
                for (Map.Entry<String, JTextField> entry : translationFieldsMap.entrySet()) {
                    String langCode = entry.getKey();
                    String name = entry.getValue().getText().trim();

                    if (!name.isEmpty()) {
                        String descPlaceholder = "M√¥ t·∫£ t·ª± ƒë·ªông cho " + langCode.toUpperCase() + " (Th√™m m·ªõi)";
                        productService.saveOrUpdateTranslation(newProductId, langCode, name, descPlaceholder);
                    }
                }

                JOptionPane.showMessageDialog(ProductUI.this, "‚úÖ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
                clearForm();
                loadProducts();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(ProductUI.this, "Gi√° ph·∫£i l√† m·ªôt con s·ªë!", "L·ªói ƒê·ªãnh d·∫°ng", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(ProductUI.this, "ƒê√£ x·∫£y ra l·ªói: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }

    private class UpdateProductListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (productTable.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(ProductUI.this, "Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ c·∫≠p nh·∫≠t!", "Ch∆∞a ch·ªçn s·∫£n ph·∫©m", JOptionPane.WARNING_MESSAGE);
                return;
            }
            Integer id = Integer.parseInt(idField.getText());

            // Ki·ªÉm tra t√™n EN (B·∫ÆT BU·ªòC)
            String enName = translationFieldsMap.getOrDefault("en", new JTextField()).getText().trim();
            if (enName.isEmpty()) {
                JOptionPane.showMessageDialog(ProductUI.this, "T√™n s·∫£n ph·∫©m Ti·∫øng Anh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", "L·ªói D·ªØ li·ªáu", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                // Ch·ªâ c·∫≠p nh·∫≠t b·∫£n d·ªãch (Gi√° v√† Danh m·ª•c b·ªã v√¥ hi·ªáu h√≥a trong form)
                for (Map.Entry<String, JTextField> entry : translationFieldsMap.entrySet()) {
                    String langCode = entry.getKey();
                    String name = entry.getValue().getText().trim();

                    // C·∫≠p nh·∫≠t ho·∫∑c th√™m m·ªõi b·∫£n d·ªãch n·∫øu c√≥ n·ªôi dung
                    if (!name.isEmpty()) {
                        String descPlaceholder = "M√¥ t·∫£ c·∫≠p nh·∫≠t cho " + langCode.toUpperCase();
                        productService.saveOrUpdateTranslation(id, langCode, name, descPlaceholder);
                    }
                    // N·∫øu tr∆∞·ªùng tr·ªëng (V√† kh√¥ng ph·∫£i EN), ta b·ªè qua, gi·ªØ l·∫°i b·∫£n d·ªãch c≈© n·∫øu c√≥.
                }

                JOptionPane.showMessageDialog(ProductUI.this, "üíæ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                loadProducts();
                clearForm();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(ProductUI.this, "L·ªói khi c·∫≠p nh·∫≠t: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }

    private class DeleteProductListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (productTable.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(ProductUI.this, "Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ x√≥a!", "Ch∆∞a ch·ªçn s·∫£n ph·∫©m", JOptionPane.WARNING_MESSAGE);
                return;
            }
            Integer id = Integer.parseInt(idField.getText());
            int confirmation = JOptionPane.showConfirmDialog(ProductUI.this, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m c√≥ ID " + id + "? (X√≥a t·∫•t c·∫£ b·∫£n d·ªãch li√™n quan)", "X√°c nh·∫≠n x√≥a", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (confirmation == JOptionPane.YES_OPTION) {
                try {
                    productService.deleteProduct(id);
                    JOptionPane.showMessageDialog(ProductUI.this, "üóëÔ∏è ƒê√£ x√≥a s·∫£n ph·∫©m th√†nh c√¥ng!");
                    loadProducts();
                    clearForm();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(ProductUI.this, "L·ªói khi x√≥a: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
            }
        }
    }

    private void clearForm() {
        idField.setText("");
        priceField.setText("");
        priceField.setEnabled(true);
        categoryCombo.setEnabled(true);
        if (categoryCombo.getItemCount() > 0) {
            categoryCombo.setSelectedIndex(0);
        }

        translationFieldsMap.values().forEach(field -> field.setText(""));

        productTable.clearSelection();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new ProductUI().setVisible(true));
    }
}